// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#import <EDBluetoothSDK/EDBluetoothSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="EDBluetoothSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, EDBLEDeviceType, open) {
  EDBLEDeviceTypeUnknown = 0,
  EDBLEDeviceTypeCoreDuo = 1,
  EDBLEDeviceTypeJumperPulseOximeter = 2,
  EDBLEDeviceTypeQnScale = 3,
  EDBLEDeviceTypeCore2DFU = 4,
  EDBLEDeviceTypeCore2Data = 5,
};

@class CBUUID;
@protocol EDBLEManagerDelegate;
@class CBPeripheral;

SWIFT_CLASS("_TtC14EDBluetoothSDK12EDBLEManager")
@interface EDBLEManager : NSObject
@property (nonatomic, readonly) CBManagerState centralManagerState;
- (nonnull instancetype)initWithTypes:(NSSet<NSNumber *> * _Nonnull)types;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2VolumeCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2ADPCMCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2FilterCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2RecordingStateCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull coreDuoCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2ANCCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2RecordingCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2RecordingDurationCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2DFUCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2DeviceInfoCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2BatteryLevelCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2DFUStartCharacteristic;
@property (nonatomic, readonly, strong) CBUUID * _Nonnull core2PairingFailureCharacteristic;
- (void)startScanWithScanTypes:(NSSet<NSNumber *> * _Nonnull)scanTypes statusHandler:(void (^ _Nonnull)(BOOL))statusHandler;
- (void)stopScan;
- (void)addDelegate:(id <EDBLEManagerDelegate> _Nonnull)delegate type:(enum EDBLEDeviceType)type;
- (void)removeDelegate:(id <EDBLEManagerDelegate> _Nonnull)delegate type:(enum EDBLEDeviceType)type;
- (void)connectPeripheralWithUuid:(NSUUID * _Nonnull)uuid;
/// Calls CBCentralManager.cancelPeripheralConnection() under the hood. It will
/// disconnect a connected peripheral or will cancel an in-progress
/// connection.
- (void)cancelConnectionWithPeripheralUUID:(NSUUID * _Nonnull)peripheralUUID;
- (void)registerForNotificationsWithPeripheralUUID:(NSUUID * _Nonnull)peripheralUUID characteristicUUID:(CBUUID * _Nonnull)characteristicUUID;
- (void)unregisterForNotificationsWithPeripheralUUID:(NSUUID * _Nonnull)peripheralUUID characteristicUUID:(CBUUID * _Nonnull)characteristicUUID;
- (void)writeWithData:(NSData * _Nonnull)data peripheralUUID:(NSUUID * _Nonnull)peripheralUUID characteristicUUID:(CBUUID * _Nonnull)characteristicUUID type:(CBCharacteristicWriteType)type;
- (void)readPeripheralUUID:(NSUUID * _Nonnull)peripheralUUID characteristicUUID:(CBUUID * _Nonnull)characteristicUUID;
- (NSArray<NSUUID *> * _Nonnull)getConnectedPeripheralsForType:(enum EDBLEDeviceType)type SWIFT_WARN_UNUSED_RESULT;
- (NSArray<CBPeripheral *> * _Nonnull)retrievePeripheralsWithIdentifiers:(NSArray<NSUUID *> * _Nonnull)identifiers SWIFT_WARN_UNUSED_RESULT;
- (void)discoverAllServicesWithPeripheralUUID:(NSUUID * _Nonnull)peripheralUUID;
- (EDPeripheralType)getTypeForPeripheral:(CBPeripheral * _Nonnull)peripheral SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBCentralManager;
@class NSNumber;

@interface EDBLEManager (SWIFT_EXTENSION(EDBluetoothSDK)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

@class CBService;
@class CBCharacteristic;

@interface EDBLEManager (SWIFT_EXTENSION(EDBluetoothSDK)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


SWIFT_PROTOCOL("_TtP14EDBluetoothSDK20EDBLEManagerDelegate_")
@protocol EDBLEManagerDelegate
- (void)bleManagerUpdatedState:(CBManagerState)state;
- (void)bleManagerDiscoveredPeripheral:(CBPeripheral * _Nonnull)peripheral type:(enum EDBLEDeviceType)type advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData rssi:(NSNumber * _Nonnull)RSSI;
- (void)bleManagerDiscoveredCharacteristicsForPeripheral:(CBPeripheral * _Nonnull)peripheral service:(CBService * _Nonnull)service;
- (void)bleManagerDiscoveredPeripheral:(CBPeripheral * _Nonnull)peripheral characteristic:(CBCharacteristic * _Nonnull)characteristic;
- (void)bleManagerConnectedToPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)bleManagerFailedToConnectToPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)bleManagerDidDisconnectFromPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)bleManagerReceivedWithData:(NSData * _Nullable)data peripheral:(CBPeripheral * _Nonnull)peripheral characteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)bleManagerUpdatedNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic peripheral:(CBPeripheral * _Nonnull)peripheral;
@end

typedef SWIFT_ENUM(NSInteger, EDBLEReconnectionPolicy, open) {
  EDBLEReconnectionPolicyNoReconnect = 0,
  EDBLEReconnectionPolicyAutoReconnect = 1,
};


SWIFT_CLASS("_TtC14EDBluetoothSDK23EDDeviceProtocolManager")
@interface EDDeviceProtocolManager : NSObject
- (nonnull instancetype)initWithBleManager:(EDBLEManager * _Nonnull)bleManager OBJC_DESIGNATED_INITIALIZER;
- (void)sendSwitchToBootloaderModeCommandWithPeripheralUUID:(NSUUID * _Nonnull)peripheralUUID;
- (void)setANCOn:(BOOL)isOn peripheralUUID:(NSUUID * _Nonnull)peripheralUUID;
- (void)setVolumeLevel:(NSInteger)level peripheralUUID:(NSUUID * _Nonnull)peripheralUUID;
- (void)setFilterMode:(EDCore2PeripheralFilterMode)mode peripheralUUID:(NSUUID * _Nonnull)peripheralUUID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, EDLogLevel, open) {
  EDLogLevelNone = 0,
  EDLogLevelDebug = 1,
  EDLogLevelInfo = 2,
  EDLogLevelError = 3,
};


SWIFT_CLASS("_TtC14EDBluetoothSDK8EDLogger")
@interface EDLogger : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum EDLogLevel level;)
+ (enum EDLogLevel)level SWIFT_WARN_UNUSED_RESULT;
+ (void)setLevel:(enum EDLogLevel)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logInFiles;)
+ (BOOL)logInFiles SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogInFiles:(BOOL)value;
+ (void)setup;
+ (void)debug:(NSString * _Nonnull)msg;
+ (void)info:(NSString * _Nonnull)msg;
+ (void)error:(NSString * _Nonnull)msg;
+ (void)logInFileWithLevel:(enum EDLogLevel)level msg:(NSString * _Nonnull)msg;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, EDOTAError, open) {
  EDOTAErrorNotReady = 0,
  EDOTAErrorFileTransferFailed = 1,
};
static NSString * _Nonnull const EDOTAErrorDomain = @"EDBluetoothSDK.EDOTAError";

@class NSMutableDictionary;

SWIFT_CLASS("_TtC14EDBluetoothSDK12EDOTAManager")
@interface EDOTAManager : NSObject
/// This will be true if an OTA is in progress or if the last OTA was not successfully
/// completed.
@property (nonatomic) BOOL otaInProgress;
- (nonnull instancetype)initWithBleManager:(EDBLEManager * _Nonnull)bleManager deviceProtocolManager:(EDDeviceProtocolManager * _Nonnull)deviceProtocolManager OBJC_DESIGNATED_INITIALIZER;
- (void)setOTAPeripheralUUIDInDFUModeWithPeripheralUUID:(NSUUID * _Nonnull)peripheralUUID successBlock:(void (^ _Nonnull)(void))successBlock;
- (void)initializeFileTransfer_v1WithHeader:(NSMutableDictionary * _Nullable)header appInfo:(NSDictionary * _Nullable)appInfo rowData:(NSArray * _Nullable)rowData success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(enum EDOTAError))failure;
- (void)switchToDFUModeForPeripheralUUID:(NSUUID * _Nonnull)peripheralUUID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface EDOTAManager (SWIFT_EXTENSION(EDBluetoothSDK)) <EDBLEManagerDelegate>
- (void)bleManagerDiscoveredCharacteristicsForPeripheral:(CBPeripheral * _Nonnull)peripheral service:(CBService * _Nonnull)service;
- (void)bleManagerReceivedWithData:(NSData * _Nullable)data peripheral:(CBPeripheral * _Nonnull)peripheral characteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)bleManagerUpdatedState:(CBManagerState)state;
- (void)bleManagerDiscoveredPeripheral:(CBPeripheral * _Nonnull)peripheral type:(enum EDBLEDeviceType)type advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData rssi:(NSNumber * _Nonnull)RSSI;
- (void)bleManagerDiscoveredPeripheral:(CBPeripheral * _Nonnull)peripheral characteristic:(CBCharacteristic * _Nonnull)characteristic;
- (void)bleManagerConnectedToPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)bleManagerFailedToConnectToPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)bleManagerDidDisconnectFromPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)bleManagerUpdatedNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic peripheral:(CBPeripheral * _Nonnull)peripheral;
@end


SWIFT_CLASS("_TtC14EDBluetoothSDK20EDPeripheralMetaData")
@interface EDPeripheralMetaData : NSObject
@property (nonatomic, copy) NSString * _Nonnull fwVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, EDPeripheralState, open) {
  EDPeripheralStateConnected = 0,
  EDPeripheralStateUserInitiatedDisconnect = 1,
  EDPeripheralStateDisconnected = 2,
};


/// EAS needs a 2s prefix to initialize its filters. This class keeps a circular buffer of audio  and ECG values
/// IMPORTANT: For thread safety this all methods in this class should be called from a serial queue.
SWIFT_CLASS("_TtC14EDBluetoothSDK23EDRecordingDataPrefixer")
@interface EDRecordingDataPrefixer : NSObject
/// This should be called only from the main thread
@property (nonatomic, readonly, copy) NSData * _Nonnull audioPrefix;
/// This should be called only from the main thread
@property (nonatomic, readonly, copy) NSData * _Nonnull ecgPrefix;
/// This should be called only from the main thread
- (void)addAudioValue:(int16_t)value;
/// This should be called only from the main thread
- (void)addECGValue:(int16_t)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14EDBluetoothSDK17EDSemanticVersion")
@interface EDSemanticVersion : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14EDBluetoothSDK5Utils")
@interface Utils : NSObject
+ (enum EDBLEDeviceType)getLastConnectedPeripheralType SWIFT_WARN_UNUSED_RESULT;
+ (CBPeripheral * _Nullable)getLastConnectedPeripheralWithBleManager:(EDBLEManager * _Nonnull)bleManager SWIFT_WARN_UNUSED_RESULT;
+ (void)setLastConnectedPeripheral:(CBPeripheral * _Nonnull)peripheral bleManager:(EDBLEManager * _Nonnull)bleManager;
+ (void)forgetLastConnectedPeripheral;
+ (NSString * _Nullable)getFwVersionFrom:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)getANCSettingFrom:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getBatteryPctFrom:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (EDSemanticVersion * _Nullable)parseSemanticVersionString:(NSString * _Nonnull)strVersion SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isGreaterWithLhs:(EDSemanticVersion * _Nonnull)lhs rhs:(EDSemanticVersion * _Nonnull)rhs SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isGreaterOrEqualWithLhs:(EDSemanticVersion * _Nonnull)lhs rhs:(EDSemanticVersion * _Nonnull)rhs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
